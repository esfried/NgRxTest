/*!
 * devextreme-angular
 * Version: 20.2.3
 * Build date: Tue Oct 20 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { TransferState } from '@angular/platform-browser';
import { ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges, QueryList } from '@angular/core';
import DevExpress from 'devextreme/bundles/dx.all';
import { dxGanttContextMenu, dxGanttToolbar } from 'devextreme/ui/gantt';
import DxGantt from 'devextreme/ui/gantt';
import { DxComponent, DxTemplateHost, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';
import { DxiColumnComponent } from 'devextreme-angular/ui/nested';
import { DxiStripLineComponent } from 'devextreme-angular/ui/nested';
/**
 * The Gantt is a widget that displays the task flow and dependencies between tasks.

 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'devextreme-angular/ui/nested';
import * as ɵngcc2 from 'devextreme-angular/core';
import * as ɵngcc3 from '@angular/platform-browser';
export declare class DxGanttComponent extends DxComponent implements OnDestroy, OnChanges, DoCheck {
    private _watcherHelper;
    private _idh;
    instance: DxGantt;
    /**
     * Specifies the shortcut key that sets focus on the widget.
    
     */
    accessKey: string;
    /**
     * Specifies whether or not the widget changes its state when interacting with a user.
    
     */
    activeStateEnabled: boolean;
    /**
     * Specifies whether users can select tasks in the Gantt.
    
     */
    allowSelection: boolean;
    /**
     * An array of columns in the Gantt.
    
     */
    columns: Array<DevExpress.ui.dxTreeListColumn | string>;
    /**
     * Configures the context menu settings.
    
     */
    contextMenu: dxGanttContextMenu;
    /**
     * Configures dependencies.
    
     */
    dependencies: {
        dataSource?: DevExpress.data.DataSource | DevExpress.data.DataSourceOptions | Array<any>;
        keyExpr?: Function | string;
        predecessorIdExpr?: Function | string;
        successorIdExpr?: Function | string;
        typeExpr?: Function | string;
    };
    /**
     * Specifies whether the widget responds to user interaction.
    
     */
    disabled: boolean;
    /**
     * Configures edit options.
    
     */
    editing: {
        allowDependencyAdding?: boolean;
        allowDependencyDeleting?: boolean;
        allowResourceAdding?: boolean;
        allowResourceDeleting?: boolean;
        allowResourceUpdating?: boolean;
        allowTaskAdding?: boolean;
        allowTaskDeleting?: boolean;
        allowTaskUpdating?: boolean;
        enabled?: boolean;
    };
    /**
     * Specifies the attributes to be attached to the widget's root element.
    
     */
    elementAttr: any;
    /**
     * Specifies the first day of a week.
    
     */
    firstDayOfWeek: number | string;
    /**
     * Specifies whether the widget can be focused using keyboard navigation.
    
     */
    focusStateEnabled: boolean;
    /**
     * Specifies the widget's height.
    
     */
    height: number | Function | string;
    /**
     * Specifies text for a hint that appears when a user pauses on the widget.
    
     */
    hint: string;
    /**
     * Specifies whether the widget changes its state when a user pauses on it.
    
     */
    hoverStateEnabled: boolean;
    /**
     * Configures resource assignments.
    
     */
    resourceAssignments: {
        dataSource?: DevExpress.data.DataSource | DevExpress.data.DataSourceOptions | Array<any>;
        keyExpr?: Function | string;
        resourceIdExpr?: Function | string;
        taskIdExpr?: Function | string;
    };
    /**
     * Configures task resources.
    
     */
    resources: {
        colorExpr?: Function | string;
        dataSource?: DevExpress.data.DataSource | DevExpress.data.DataSourceOptions | Array<any>;
        keyExpr?: Function | string;
        textExpr?: Function | string;
    };
    /**
     * Specifies the root task's identifier.
    
     */
    rootValue: any;
    /**
     * Specifies the zoom level of tasks in the Gantt chart.
    
     */
    scaleType: string;
    /**
     * Allows you to select a row or determine which row is selected.
    
     */
    selectedRowKey: any;
    /**
     * Specifies whether to display task resources.
    
     */
    showResources: boolean;
    /**
     * Specifies whether to show/hide horizontal faint lines that separate tasks.
    
     */
    showRowLines: boolean;
    /**
     * Configures strip lines.
    
     */
    stripLines: Array<DevExpress.ui.dxGanttStripLine>;
    /**
     * Specifies the number of the element when the Tab key is used for navigating.
    
     */
    tabIndex: number;
    /**
     * Specifies the width of the task list in pixels.
    
     */
    taskListWidth: number;
    /**
     * Configures tasks.
    
     */
    tasks: {
        colorExpr?: Function | string;
        dataSource?: DevExpress.data.DataSource | DevExpress.data.DataSourceOptions | Array<any>;
        endExpr?: Function | string;
        keyExpr?: Function | string;
        parentIdExpr?: Function | string;
        progressExpr?: Function | string;
        startExpr?: Function | string;
        titleExpr?: Function | string;
    };
    /**
     * Specifies a task's title position.
    
     */
    taskTitlePosition: string;
    /**
     * Specifies custom content for the task tooltip.
    
     */
    taskTooltipContentTemplate: any;
    /**
     * Configures toolbar settings.
    
     */
    toolbar: dxGanttToolbar;
    /**
     * Configures validation options.
    
     */
    validation: {
        autoUpdateParentTasks?: boolean;
        validateDependencies?: boolean;
    };
    /**
     * Specifies whether the widget is visible.
    
     */
    visible: boolean;
    /**
     * Specifies the widget's width.
    
     */
    width: number | Function | string;
    /**
    
     * A function that is executed when the widget's content is ready and each time the content is changed.
    
    
     */
    onContentReady: EventEmitter<any>;
    /**
    
     * A function that is executed before the context menu is rendered.
    
    
     */
    onContextMenuPreparing: EventEmitter<any>;
    /**
    
     * A function that is executed after a custom command item was clicked. Allows you to implement a custom command's functionality.
    
    
     */
    onCustomCommand: EventEmitter<any>;
    /**
    
     * A function that is executed before a dependency is deleted.
    
    
     */
    onDependencyDeleting: EventEmitter<any>;
    /**
    
     * A function that is executed before a dependency is inserted.
    
    
     */
    onDependencyInserting: EventEmitter<any>;
    /**
    
     * A function that is executed before the widget is disposed of.
    
    
     */
    onDisposing: EventEmitter<any>;
    /**
    
     * A function used in JavaScript frameworks to save the widget instance.
    
    
     */
    onInitialized: EventEmitter<any>;
    /**
    
     * A function that is executed after a widget option is changed.
    
    
     */
    onOptionChanged: EventEmitter<any>;
    /**
    
     * A function that is executed before a resource is assigned to a task.
    
    
     */
    onResourceAssigning: EventEmitter<any>;
    /**
    
     * A function that is executed before a resource is deleted.
    
    
     */
    onResourceDeleting: EventEmitter<any>;
    /**
    
     * A function that is executed before a resource is inserted.
    
    
     */
    onResourceInserting: EventEmitter<any>;
    /**
    
     * A function that is executed before a resource is unassigned from a task.
    
    
     */
    onResourceUnassigning: EventEmitter<any>;
    /**
    
     * A function that is executed after users select a task or clear its selection.
    
    
     */
    onSelectionChanged: EventEmitter<any>;
    /**
    
     * A function that is executed when a user clicks a task.
    
    
     */
    onTaskClick: EventEmitter<any>;
    /**
    
     * A function that is executed when a user double-clicks a task.
    
    
     */
    onTaskDblClick: EventEmitter<any>;
    /**
    
     * A function that is executed before a task is deleted.
    
    
     */
    onTaskDeleting: EventEmitter<any>;
    /**
    
     * A function that is executed before the edit dialog is shown.
    
    
     */
    onTaskEditDialogShowing: EventEmitter<any>;
    /**
    
     * A function that is executed before a task is inserted.
    
    
     */
    onTaskInserting: EventEmitter<any>;
    /**
    
     * A function that is executed before a task is moved.
    
    
     */
    onTaskMoving: EventEmitter<any>;
    /**
    
     * A function that is executed before a task is updated.
    
    
     */
    onTaskUpdating: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    accessKeyChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    activeStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    allowSelectionChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    columnsChange: EventEmitter<Array<DevExpress.ui.dxTreeListColumn | string>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    contextMenuChange: EventEmitter<dxGanttContextMenu>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dependenciesChange: EventEmitter<{
        dataSource?: DevExpress.data.DataSource | DevExpress.data.DataSourceOptions | Array<any>;
        keyExpr?: Function | string;
        predecessorIdExpr?: Function | string;
        successorIdExpr?: Function | string;
        typeExpr?: Function | string;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    disabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    editingChange: EventEmitter<{
        allowDependencyAdding?: boolean;
        allowDependencyDeleting?: boolean;
        allowResourceAdding?: boolean;
        allowResourceDeleting?: boolean;
        allowResourceUpdating?: boolean;
        allowTaskAdding?: boolean;
        allowTaskDeleting?: boolean;
        allowTaskUpdating?: boolean;
        enabled?: boolean;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    elementAttrChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    firstDayOfWeekChange: EventEmitter<number | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    focusStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    heightChange: EventEmitter<number | Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hintChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hoverStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    resourceAssignmentsChange: EventEmitter<{
        dataSource?: DevExpress.data.DataSource | DevExpress.data.DataSourceOptions | Array<any>;
        keyExpr?: Function | string;
        resourceIdExpr?: Function | string;
        taskIdExpr?: Function | string;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    resourcesChange: EventEmitter<{
        colorExpr?: Function | string;
        dataSource?: DevExpress.data.DataSource | DevExpress.data.DataSourceOptions | Array<any>;
        keyExpr?: Function | string;
        textExpr?: Function | string;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rootValueChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    scaleTypeChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    selectedRowKeyChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    showResourcesChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    showRowLinesChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    stripLinesChange: EventEmitter<Array<DevExpress.ui.dxGanttStripLine>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    tabIndexChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    taskListWidthChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    tasksChange: EventEmitter<{
        colorExpr?: Function | string;
        dataSource?: DevExpress.data.DataSource | DevExpress.data.DataSourceOptions | Array<any>;
        endExpr?: Function | string;
        keyExpr?: Function | string;
        parentIdExpr?: Function | string;
        progressExpr?: Function | string;
        startExpr?: Function | string;
        titleExpr?: Function | string;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    taskTitlePositionChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    taskTooltipContentTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    toolbarChange: EventEmitter<dxGanttToolbar>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    validationChange: EventEmitter<{
        autoUpdateParentTasks?: boolean;
        validateDependencies?: boolean;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    visibleChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    widthChange: EventEmitter<number | Function | string>;
    columnsChildren: QueryList<DxiColumnComponent>;
    stripLinesChildren: QueryList<DxiStripLineComponent>;
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxGantt;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    setupChanges(prop: string, changes: SimpleChanges): void;
    ngDoCheck(): void;
    _setOption(name: string, value: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DxGanttComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<DxGanttComponent, "dx-gantt", never, { "accessKey": "accessKey"; "activeStateEnabled": "activeStateEnabled"; "allowSelection": "allowSelection"; "columns": "columns"; "contextMenu": "contextMenu"; "dependencies": "dependencies"; "disabled": "disabled"; "editing": "editing"; "elementAttr": "elementAttr"; "firstDayOfWeek": "firstDayOfWeek"; "focusStateEnabled": "focusStateEnabled"; "height": "height"; "hint": "hint"; "hoverStateEnabled": "hoverStateEnabled"; "resourceAssignments": "resourceAssignments"; "resources": "resources"; "rootValue": "rootValue"; "scaleType": "scaleType"; "selectedRowKey": "selectedRowKey"; "showResources": "showResources"; "showRowLines": "showRowLines"; "stripLines": "stripLines"; "tabIndex": "tabIndex"; "taskListWidth": "taskListWidth"; "tasks": "tasks"; "taskTitlePosition": "taskTitlePosition"; "taskTooltipContentTemplate": "taskTooltipContentTemplate"; "toolbar": "toolbar"; "validation": "validation"; "visible": "visible"; "width": "width"; }, { "onContentReady": "onContentReady"; "onContextMenuPreparing": "onContextMenuPreparing"; "onCustomCommand": "onCustomCommand"; "onDependencyDeleting": "onDependencyDeleting"; "onDependencyInserting": "onDependencyInserting"; "onDisposing": "onDisposing"; "onInitialized": "onInitialized"; "onOptionChanged": "onOptionChanged"; "onResourceAssigning": "onResourceAssigning"; "onResourceDeleting": "onResourceDeleting"; "onResourceInserting": "onResourceInserting"; "onResourceUnassigning": "onResourceUnassigning"; "onSelectionChanged": "onSelectionChanged"; "onTaskClick": "onTaskClick"; "onTaskDblClick": "onTaskDblClick"; "onTaskDeleting": "onTaskDeleting"; "onTaskEditDialogShowing": "onTaskEditDialogShowing"; "onTaskInserting": "onTaskInserting"; "onTaskMoving": "onTaskMoving"; "onTaskUpdating": "onTaskUpdating"; "accessKeyChange": "accessKeyChange"; "activeStateEnabledChange": "activeStateEnabledChange"; "allowSelectionChange": "allowSelectionChange"; "columnsChange": "columnsChange"; "contextMenuChange": "contextMenuChange"; "dependenciesChange": "dependenciesChange"; "disabledChange": "disabledChange"; "editingChange": "editingChange"; "elementAttrChange": "elementAttrChange"; "firstDayOfWeekChange": "firstDayOfWeekChange"; "focusStateEnabledChange": "focusStateEnabledChange"; "heightChange": "heightChange"; "hintChange": "hintChange"; "hoverStateEnabledChange": "hoverStateEnabledChange"; "resourceAssignmentsChange": "resourceAssignmentsChange"; "resourcesChange": "resourcesChange"; "rootValueChange": "rootValueChange"; "scaleTypeChange": "scaleTypeChange"; "selectedRowKeyChange": "selectedRowKeyChange"; "showResourcesChange": "showResourcesChange"; "showRowLinesChange": "showRowLinesChange"; "stripLinesChange": "stripLinesChange"; "tabIndexChange": "tabIndexChange"; "taskListWidthChange": "taskListWidthChange"; "tasksChange": "tasksChange"; "taskTitlePositionChange": "taskTitlePositionChange"; "taskTooltipContentTemplateChange": "taskTooltipContentTemplateChange"; "toolbarChange": "toolbarChange"; "validationChange": "validationChange"; "visibleChange": "visibleChange"; "widthChange": "widthChange"; }, ["columnsChildren", "stripLinesChildren"], never>;
}
export declare class DxGanttModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<DxGanttModule, [typeof DxGanttComponent], [typeof ɵngcc1.DxiColumnModule, typeof ɵngcc1.DxiButtonModule, typeof ɵngcc1.DxoHeaderFilterModule, typeof ɵngcc1.DxoLookupModule, typeof ɵngcc1.DxoFormatModule, typeof ɵngcc1.DxoFormItemModule, typeof ɵngcc1.DxoLabelModule, typeof ɵngcc1.DxiValidationRuleModule, typeof ɵngcc1.DxoContextMenuModule, typeof ɵngcc1.DxiItemModule, typeof ɵngcc1.DxoDependenciesModule, typeof ɵngcc1.DxoEditingModule, typeof ɵngcc1.DxoResourceAssignmentsModule, typeof ɵngcc1.DxoResourcesModule, typeof ɵngcc1.DxiStripLineModule, typeof ɵngcc1.DxoTasksModule, typeof ɵngcc1.DxoToolbarModule, typeof ɵngcc1.DxoValidationModule, typeof ɵngcc2.DxIntegrationModule, typeof ɵngcc2.DxTemplateModule, typeof ɵngcc3.BrowserTransferStateModule], [typeof DxGanttComponent, typeof ɵngcc1.DxiColumnModule, typeof ɵngcc1.DxiButtonModule, typeof ɵngcc1.DxoHeaderFilterModule, typeof ɵngcc1.DxoLookupModule, typeof ɵngcc1.DxoFormatModule, typeof ɵngcc1.DxoFormItemModule, typeof ɵngcc1.DxoLabelModule, typeof ɵngcc1.DxiValidationRuleModule, typeof ɵngcc1.DxoContextMenuModule, typeof ɵngcc1.DxiItemModule, typeof ɵngcc1.DxoDependenciesModule, typeof ɵngcc1.DxoEditingModule, typeof ɵngcc1.DxoResourceAssignmentsModule, typeof ɵngcc1.DxoResourcesModule, typeof ɵngcc1.DxiStripLineModule, typeof ɵngcc1.DxoTasksModule, typeof ɵngcc1.DxoToolbarModule, typeof ɵngcc1.DxoValidationModule, typeof ɵngcc2.DxTemplateModule]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<DxGanttModule>;
}

//# sourceMappingURL=index.d.ts.map