import { __decorate, __metadata, __param } from 'tslib';
import { TransferState, BrowserTransferStateModule } from '@angular/platform-browser';
import { forwardRef, ElementRef, NgZone, Inject, PLATFORM_ID, Input, Output, EventEmitter, HostListener, ContentChildren, QueryList, Component, NgModule } from '@angular/core';
import DxLookup from 'devextreme/ui/lookup';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { DxComponent, DxTemplateHost, WatcherHelper, IterableDifferHelper, NestedOptionHost, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';
import { DxiItemComponent, DxoAnimationModule, DxoHideModule, DxoShowModule, DxoDropDownOptionsModule, DxoHideEventModule, DxoPositionModule, DxoAtModule, DxoBoundaryOffsetModule, DxoCollisionModule, DxoMyModule, DxoOffsetModule, DxoShowEventModule, DxiToolbarItemModule, DxiItemModule } from 'devextreme-angular/ui/nested';

/*!
 * devextreme-angular
 * Version: 20.2.3
 * Build date: Tue Oct 20 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'devextreme-angular/core';
import * as ɵngcc2 from '@angular/platform-browser';
const CUSTOM_VALUE_ACCESSOR_PROVIDER = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => DxLookupComponent),
    multi: true
};
/**
 * The Lookup is a widget that allows an end user to search for an item in a collection shown in a drop-down menu.

 */
let DxLookupComponent = class DxLookupComponent extends DxComponent {
    constructor(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {
        super(elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);
        this._watcherHelper = _watcherHelper;
        this._idh = _idh;
        this.touched = (_) => { };
        this._createEventEmitters([
            { subscribe: 'closed', emit: 'onClosed' },
            { subscribe: 'contentReady', emit: 'onContentReady' },
            { subscribe: 'disposing', emit: 'onDisposing' },
            { subscribe: 'initialized', emit: 'onInitialized' },
            { subscribe: 'itemClick', emit: 'onItemClick' },
            { subscribe: 'opened', emit: 'onOpened' },
            { subscribe: 'optionChanged', emit: 'onOptionChanged' },
            { subscribe: 'pageLoading', emit: 'onPageLoading' },
            { subscribe: 'pullRefresh', emit: 'onPullRefresh' },
            { subscribe: 'scroll', emit: 'onScroll' },
            { subscribe: 'selectionChanged', emit: 'onSelectionChanged' },
            { subscribe: 'titleRendered', emit: 'onTitleRendered' },
            { subscribe: 'valueChanged', emit: 'onValueChanged' },
            { emit: 'accessKeyChange' },
            { emit: 'activeStateEnabledChange' },
            { emit: 'animationChange' },
            { emit: 'applyButtonTextChange' },
            { emit: 'applyValueModeChange' },
            { emit: 'cancelButtonTextChange' },
            { emit: 'cleanSearchOnOpeningChange' },
            { emit: 'clearButtonTextChange' },
            { emit: 'closeOnOutsideClickChange' },
            { emit: 'dataSourceChange' },
            { emit: 'deferRenderingChange' },
            { emit: 'disabledChange' },
            { emit: 'displayExprChange' },
            { emit: 'displayValueChange' },
            { emit: 'dropDownCenteredChange' },
            { emit: 'dropDownOptionsChange' },
            { emit: 'elementAttrChange' },
            { emit: 'fieldTemplateChange' },
            { emit: 'focusStateEnabledChange' },
            { emit: 'fullScreenChange' },
            { emit: 'groupedChange' },
            { emit: 'groupTemplateChange' },
            { emit: 'heightChange' },
            { emit: 'hintChange' },
            { emit: 'hoverStateEnabledChange' },
            { emit: 'inputAttrChange' },
            { emit: 'isValidChange' },
            { emit: 'itemsChange' },
            { emit: 'itemTemplateChange' },
            { emit: 'minSearchLengthChange' },
            { emit: 'nameChange' },
            { emit: 'nextButtonTextChange' },
            { emit: 'noDataTextChange' },
            { emit: 'openedChange' },
            { emit: 'pageLoadingTextChange' },
            { emit: 'pageLoadModeChange' },
            { emit: 'placeholderChange' },
            { emit: 'popupHeightChange' },
            { emit: 'popupWidthChange' },
            { emit: 'positionChange' },
            { emit: 'pulledDownTextChange' },
            { emit: 'pullingDownTextChange' },
            { emit: 'pullRefreshEnabledChange' },
            { emit: 'refreshingTextChange' },
            { emit: 'rtlEnabledChange' },
            { emit: 'searchEnabledChange' },
            { emit: 'searchExprChange' },
            { emit: 'searchModeChange' },
            { emit: 'searchPlaceholderChange' },
            { emit: 'searchTimeoutChange' },
            { emit: 'selectedItemChange' },
            { emit: 'shadingChange' },
            { emit: 'showCancelButtonChange' },
            { emit: 'showClearButtonChange' },
            { emit: 'showDataBeforeSearchChange' },
            { emit: 'showPopupTitleChange' },
            { emit: 'stylingModeChange' },
            { emit: 'tabIndexChange' },
            { emit: 'textChange' },
            { emit: 'titleChange' },
            { emit: 'titleTemplateChange' },
            { emit: 'useNativeScrollingChange' },
            { emit: 'usePopoverChange' },
            { emit: 'validationErrorChange' },
            { emit: 'validationErrorsChange' },
            { emit: 'validationMessageModeChange' },
            { emit: 'validationStatusChange' },
            { emit: 'valueChange' },
            { emit: 'valueChangeEventChange' },
            { emit: 'valueExprChange' },
            { emit: 'visibleChange' },
            { emit: 'widthChange' },
            { emit: 'wrapItemTextChange' },
            { emit: 'onBlur' }
        ]);
        this._idh.setHost(this);
        optionHost.setHost(this);
    }
    /**
     * Specifies the shortcut key that sets focus on the widget.
    
     */
    get accessKey() {
        return this._getOption('accessKey');
    }
    set accessKey(value) {
        this._setOption('accessKey', value);
    }
    /**
     * Specifies whether or not the widget changes its state when interacting with a user.
    
     */
    get activeStateEnabled() {
        return this._getOption('activeStateEnabled');
    }
    set activeStateEnabled(value) {
        this._setOption('activeStateEnabled', value);
    }
    /**
     * Configures widget visibility animations. This object contains two fields: show and hide.
    
     * @deprecated Use the dropDownOptions option instead.
    
     */
    get animation() {
        return this._getOption('animation');
    }
    set animation(value) {
        this._setOption('animation', value);
    }
    /**
     * The text displayed on the Apply button.
    
     */
    get applyButtonText() {
        return this._getOption('applyButtonText');
    }
    set applyButtonText(value) {
        this._setOption('applyButtonText', value);
    }
    /**
     * Specifies the way an end-user applies the selected value.
    
     */
    get applyValueMode() {
        return this._getOption('applyValueMode');
    }
    set applyValueMode(value) {
        this._setOption('applyValueMode', value);
    }
    /**
     * The text displayed on the Cancel button.
    
     */
    get cancelButtonText() {
        return this._getOption('cancelButtonText');
    }
    set cancelButtonText(value) {
        this._setOption('cancelButtonText', value);
    }
    /**
     * Specifies whether or not the widget cleans the search box when the popup window is displayed.
    
     */
    get cleanSearchOnOpening() {
        return this._getOption('cleanSearchOnOpening');
    }
    set cleanSearchOnOpening(value) {
        this._setOption('cleanSearchOnOpening', value);
    }
    /**
     * The text displayed on the Clear button.
    
     */
    get clearButtonText() {
        return this._getOption('clearButtonText');
    }
    set clearButtonText(value) {
        this._setOption('clearButtonText', value);
    }
    /**
     * Specifies whether to close the drop-down menu if a user clicks outside it.
    
     * @deprecated Use the dropDownOptions option instead.
    
     */
    get closeOnOutsideClick() {
        return this._getOption('closeOnOutsideClick');
    }
    set closeOnOutsideClick(value) {
        this._setOption('closeOnOutsideClick', value);
    }
    /**
     * Binds the widget to data.
    
     */
    get dataSource() {
        return this._getOption('dataSource');
    }
    set dataSource(value) {
        this._setOption('dataSource', value);
    }
    /**
     * Specifies whether to render the drop-down field's content when it is displayed. If false, the content is rendered immediately.
    
     */
    get deferRendering() {
        return this._getOption('deferRendering');
    }
    set deferRendering(value) {
        this._setOption('deferRendering', value);
    }
    /**
     * Specifies whether the widget responds to user interaction.
    
     */
    get disabled() {
        return this._getOption('disabled');
    }
    set disabled(value) {
        this._setOption('disabled', value);
    }
    /**
     * Specifies the data field whose values should be displayed.
    
     */
    get displayExpr() {
        return this._getOption('displayExpr');
    }
    set displayExpr(value) {
        this._setOption('displayExpr', value);
    }
    /**
     * Returns the value currently displayed by the widget.
    
     */
    get displayValue() {
        return this._getOption('displayValue');
    }
    set displayValue(value) {
        this._setOption('displayValue', value);
    }
    /**
     * Specifies whether to vertically align the drop-down menu so that the selected item is in its center. Applies only in Material Design themes.
    
     */
    get dropDownCentered() {
        return this._getOption('dropDownCentered');
    }
    set dropDownCentered(value) {
        this._setOption('dropDownCentered', value);
    }
    /**
     * Configures the drop-down field.
    
     */
    get dropDownOptions() {
        return this._getOption('dropDownOptions');
    }
    set dropDownOptions(value) {
        this._setOption('dropDownOptions', value);
    }
    /**
     * Specifies the attributes to be attached to the widget's root element.
    
     */
    get elementAttr() {
        return this._getOption('elementAttr');
    }
    set elementAttr(value) {
        this._setOption('elementAttr', value);
    }
    /**
     * Specifies a custom template for the input field.
    
     */
    get fieldTemplate() {
        return this._getOption('fieldTemplate');
    }
    set fieldTemplate(value) {
        this._setOption('fieldTemplate', value);
    }
    /**
     * Specifies whether the widget can be focused using keyboard navigation.
    
     */
    get focusStateEnabled() {
        return this._getOption('focusStateEnabled');
    }
    set focusStateEnabled(value) {
        this._setOption('focusStateEnabled', value);
    }
    /**
     * A Boolean value specifying whether or not to display the lookup in full-screen mode.
    
     * @deprecated Use the dropDownOptions option instead.
    
     */
    get fullScreen() {
        return this._getOption('fullScreen');
    }
    set fullScreen(value) {
        this._setOption('fullScreen', value);
    }
    /**
     * A Boolean value specifying whether or not to group widget items.
    
     */
    get grouped() {
        return this._getOption('grouped');
    }
    set grouped(value) {
        this._setOption('grouped', value);
    }
    /**
     * Specifies a custom template for group captions.
    
     */
    get groupTemplate() {
        return this._getOption('groupTemplate');
    }
    set groupTemplate(value) {
        this._setOption('groupTemplate', value);
    }
    /**
     * Specifies the widget's height.
    
     */
    get height() {
        return this._getOption('height');
    }
    set height(value) {
        this._setOption('height', value);
    }
    /**
     * Specifies text for a hint that appears when a user pauses on the widget.
    
     */
    get hint() {
        return this._getOption('hint');
    }
    set hint(value) {
        this._setOption('hint', value);
    }
    /**
     * Specifies whether the widget changes its state when a user pauses on it.
    
     */
    get hoverStateEnabled() {
        return this._getOption('hoverStateEnabled');
    }
    set hoverStateEnabled(value) {
        this._setOption('hoverStateEnabled', value);
    }
    /**
     * Specifies the attributes to be passed on to the underlying HTML element.
    
     */
    get inputAttr() {
        return this._getOption('inputAttr');
    }
    set inputAttr(value) {
        this._setOption('inputAttr', value);
    }
    /**
     * Specifies or indicates whether the editor's value is valid.
    
     */
    get isValid() {
        return this._getOption('isValid');
    }
    set isValid(value) {
        this._setOption('isValid', value);
    }
    /**
     * An array of items displayed by the widget.
    
     */
    get items() {
        return this._getOption('items');
    }
    set items(value) {
        this._setOption('items', value);
    }
    /**
     * Specifies a custom template for items.
    
     */
    get itemTemplate() {
        return this._getOption('itemTemplate');
    }
    set itemTemplate(value) {
        this._setOption('itemTemplate', value);
    }
    /**
     * The minimum number of characters that must be entered into the text box to begin a search. Applies only if searchEnabled is true.
    
     */
    get minSearchLength() {
        return this._getOption('minSearchLength');
    }
    set minSearchLength(value) {
        this._setOption('minSearchLength', value);
    }
    /**
     * The value to be assigned to the `name` attribute of the underlying HTML element.
    
     */
    get name() {
        return this._getOption('name');
    }
    set name(value) {
        this._setOption('name', value);
    }
    /**
     * The text displayed on the button used to load the next page from the data source.
    
     */
    get nextButtonText() {
        return this._getOption('nextButtonText');
    }
    set nextButtonText(value) {
        this._setOption('nextButtonText', value);
    }
    /**
     * The text or HTML markup displayed by the widget if the item collection is empty.
    
     */
    get noDataText() {
        return this._getOption('noDataText');
    }
    set noDataText(value) {
        this._setOption('noDataText', value);
    }
    /**
     * Specifies whether or not the drop-down editor is displayed.
    
     */
    get opened() {
        return this._getOption('opened');
    }
    set opened(value) {
        this._setOption('opened', value);
    }
    /**
     * Specifies the text shown in the pullDown panel, which is displayed when the widget is scrolled to the bottom.
    
     */
    get pageLoadingText() {
        return this._getOption('pageLoadingText');
    }
    set pageLoadingText(value) {
        this._setOption('pageLoadingText', value);
    }
    /**
     * Specifies whether the next page is loaded when a user scrolls the widget to the bottom or when the "next" button is clicked.
    
     */
    get pageLoadMode() {
        return this._getOption('pageLoadMode');
    }
    set pageLoadMode(value) {
        this._setOption('pageLoadMode', value);
    }
    /**
     * The text displayed by the widget when nothing is selected.
    
     */
    get placeholder() {
        return this._getOption('placeholder');
    }
    set placeholder(value) {
        this._setOption('placeholder', value);
    }
    /**
     * Specifies the popup element's height. Applies only if fullScreen is false.
    
     * @deprecated Use the dropDownOptions option instead.
    
     */
    get popupHeight() {
        return this._getOption('popupHeight');
    }
    set popupHeight(value) {
        this._setOption('popupHeight', value);
    }
    /**
     * Specifies the popup element's width. Applies only if fullScreen is false.
    
     * @deprecated Use the dropDownOptions option instead.
    
     */
    get popupWidth() {
        return this._getOption('popupWidth');
    }
    set popupWidth(value) {
        this._setOption('popupWidth', value);
    }
    /**
     * An object defining widget positioning options.
    
     * @deprecated Use the dropDownOptions option instead.
    
     */
    get position() {
        return this._getOption('position');
    }
    set position(value) {
        this._setOption('position', value);
    }
    /**
     * Specifies the text displayed in the pullDown panel when the widget is pulled below the refresh threshold.
    
     */
    get pulledDownText() {
        return this._getOption('pulledDownText');
    }
    set pulledDownText(value) {
        this._setOption('pulledDownText', value);
    }
    /**
     * Specifies the text shown in the pullDown panel while the list is being pulled down to the refresh threshold.
    
     */
    get pullingDownText() {
        return this._getOption('pullingDownText');
    }
    set pullingDownText(value) {
        this._setOption('pullingDownText', value);
    }
    /**
     * A Boolean value specifying whether or not the widget supports the "pull down to refresh" gesture.
    
     */
    get pullRefreshEnabled() {
        return this._getOption('pullRefreshEnabled');
    }
    set pullRefreshEnabled(value) {
        this._setOption('pullRefreshEnabled', value);
    }
    /**
     * Specifies the text displayed in the pullDown panel while the widget is being refreshed.
    
     */
    get refreshingText() {
        return this._getOption('refreshingText');
    }
    set refreshingText(value) {
        this._setOption('refreshingText', value);
    }
    /**
     * Switches the widget to a right-to-left representation.
    
     */
    get rtlEnabled() {
        return this._getOption('rtlEnabled');
    }
    set rtlEnabled(value) {
        this._setOption('rtlEnabled', value);
    }
    /**
     * Specifies whether the search box is visible.
    
     */
    get searchEnabled() {
        return this._getOption('searchEnabled');
    }
    set searchEnabled(value) {
        this._setOption('searchEnabled', value);
    }
    /**
     * Specifies the name of a data source item field or an expression whose value is compared to the search criterion.
    
     */
    get searchExpr() {
        return this._getOption('searchExpr');
    }
    set searchExpr(value) {
        this._setOption('searchExpr', value);
    }
    /**
     * Specifies a comparison operation used to search widget items.
    
     */
    get searchMode() {
        return this._getOption('searchMode');
    }
    set searchMode(value) {
        this._setOption('searchMode', value);
    }
    /**
     * The text that is provided as a hint in the lookup's search bar.
    
     */
    get searchPlaceholder() {
        return this._getOption('searchPlaceholder');
    }
    set searchPlaceholder(value) {
        this._setOption('searchPlaceholder', value);
    }
    /**
     * Specifies the time delay, in milliseconds, after the last character has been typed in, before a search is executed.
    
     */
    get searchTimeout() {
        return this._getOption('searchTimeout');
    }
    set searchTimeout(value) {
        this._setOption('searchTimeout', value);
    }
    /**
     * Gets the currently selected item.
    
     */
    get selectedItem() {
        return this._getOption('selectedItem');
    }
    set selectedItem(value) {
        this._setOption('selectedItem', value);
    }
    /**
     * Specifies whether to shade the container when the lookup is active. Applies only if usePopover is false.
    
     * @deprecated Use the dropDownOptions option instead.
    
     */
    get shading() {
        return this._getOption('shading');
    }
    set shading(value) {
        this._setOption('shading', value);
    }
    /**
     * Specifies whether to display the Cancel button in the lookup window.
    
     */
    get showCancelButton() {
        return this._getOption('showCancelButton');
    }
    set showCancelButton(value) {
        this._setOption('showCancelButton', value);
    }
    /**
     * Specifies whether or not to display the Clear button in the lookup window.
    
     */
    get showClearButton() {
        return this._getOption('showClearButton');
    }
    set showClearButton(value) {
        this._setOption('showClearButton', value);
    }
    /**
     * Specifies whether or not the widget displays unfiltered values until a user types a number of characters exceeding the minSearchLength option value.
    
     */
    get showDataBeforeSearch() {
        return this._getOption('showDataBeforeSearch');
    }
    set showDataBeforeSearch(value) {
        this._setOption('showDataBeforeSearch', value);
    }
    /**
     * A Boolean value specifying whether or not to display the title in the popup window.
    
     * @deprecated Use the dropDownOptions option instead.
    
     */
    get showPopupTitle() {
        return this._getOption('showPopupTitle');
    }
    set showPopupTitle(value) {
        this._setOption('showPopupTitle', value);
    }
    /**
     * Specifies how the widget's text field is styled.
    
     */
    get stylingMode() {
        return this._getOption('stylingMode');
    }
    set stylingMode(value) {
        this._setOption('stylingMode', value);
    }
    /**
     * Specifies the number of the element when the Tab key is used for navigating.
    
     */
    get tabIndex() {
        return this._getOption('tabIndex');
    }
    set tabIndex(value) {
        this._setOption('tabIndex', value);
    }
    /**
     * The read-only option that holds the text displayed by the widget input element.
    
     */
    get text() {
        return this._getOption('text');
    }
    set text(value) {
        this._setOption('text', value);
    }
    /**
     * The title of the lookup window.
    
     * @deprecated Use the dropDownOptions option instead.
    
     */
    get title() {
        return this._getOption('title');
    }
    set title(value) {
        this._setOption('title', value);
    }
    /**
     * Specifies a custom template for the title.
    
     * @deprecated Use the dropDownOptions option instead.
    
     */
    get titleTemplate() {
        return this._getOption('titleTemplate');
    }
    set titleTemplate(value) {
        this._setOption('titleTemplate', value);
    }
    /**
     * Specifies whether or not the widget uses native scrolling.
    
     */
    get useNativeScrolling() {
        return this._getOption('useNativeScrolling');
    }
    set useNativeScrolling(value) {
        this._setOption('useNativeScrolling', value);
    }
    /**
     * Specifies whether to show lookup contents in the Popover widget.
    
     */
    get usePopover() {
        return this._getOption('usePopover');
    }
    set usePopover(value) {
        this._setOption('usePopover', value);
    }
    /**
     * Information on the broken validation rule. Contains the first item from the validationErrors array.
    
     */
    get validationError() {
        return this._getOption('validationError');
    }
    set validationError(value) {
        this._setOption('validationError', value);
    }
    /**
     * An array of the validation rules that failed.
    
     */
    get validationErrors() {
        return this._getOption('validationErrors');
    }
    set validationErrors(value) {
        this._setOption('validationErrors', value);
    }
    /**
     * Specifies how the message about the validation rules that are not satisfied by this editor's value is displayed.
    
     */
    get validationMessageMode() {
        return this._getOption('validationMessageMode');
    }
    set validationMessageMode(value) {
        this._setOption('validationMessageMode', value);
    }
    /**
     * Indicates or specifies the current validation status.
    
     */
    get validationStatus() {
        return this._getOption('validationStatus');
    }
    set validationStatus(value) {
        this._setOption('validationStatus', value);
    }
    /**
     * Specifies the currently selected value. May be an object if dataSource contains objects and valueExpr is not set.
    
     */
    get value() {
        return this._getOption('value');
    }
    set value(value) {
        this._setOption('value', value);
    }
    /**
     * Specifies the DOM events after which the widget's value should be updated.
    
     */
    get valueChangeEvent() {
        return this._getOption('valueChangeEvent');
    }
    set valueChangeEvent(value) {
        this._setOption('valueChangeEvent', value);
    }
    /**
     * Specifies which data field provides unique values to the widget's value.
    
     */
    get valueExpr() {
        return this._getOption('valueExpr');
    }
    set valueExpr(value) {
        this._setOption('valueExpr', value);
    }
    /**
     * Specifies whether the widget is visible.
    
     */
    get visible() {
        return this._getOption('visible');
    }
    set visible(value) {
        this._setOption('visible', value);
    }
    /**
     * Specifies the widget's width.
    
     */
    get width() {
        return this._getOption('width');
    }
    set width(value) {
        this._setOption('width', value);
    }
    /**
     * Specifies whether text that exceeds the drop-down list width should be wrapped.
    
     */
    get wrapItemText() {
        return this._getOption('wrapItemText');
    }
    set wrapItemText(value) {
        this._setOption('wrapItemText', value);
    }
    change(_) { }
    get itemsChildren() {
        return this._getOption('items');
    }
    set itemsChildren(value) {
        this.setChildren('items', value);
    }
    _createInstance(element, options) {
        return new DxLookup(element, options);
    }
    writeValue(value) {
        this.eventHelper.lockedValueChangeEvent = true;
        this.value = value;
        this.eventHelper.lockedValueChangeEvent = false;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    registerOnChange(fn) { this.change = fn; }
    registerOnTouched(fn) { this.touched = fn; }
    _createWidget(element) {
        super._createWidget(element);
        this.instance.on('focusOut', (e) => {
            this.eventHelper.fireNgEvent('onBlur', [e]);
        });
    }
    ngOnDestroy() {
        this._destroyWidget();
    }
    ngOnChanges(changes) {
        super.ngOnChanges(changes);
        this.setupChanges('dataSource', changes);
        this.setupChanges('items', changes);
        this.setupChanges('searchExpr', changes);
        this.setupChanges('validationErrors', changes);
    }
    setupChanges(prop, changes) {
        if (!(prop in this._optionsToUpdate)) {
            this._idh.setup(prop, changes);
        }
    }
    ngDoCheck() {
        this._idh.doCheck('dataSource');
        this._idh.doCheck('items');
        this._idh.doCheck('searchExpr');
        this._idh.doCheck('validationErrors');
        this._watcherHelper.checkWatchers();
        super.ngDoCheck();
        super.clearChangedOptions();
    }
    _setOption(name, value) {
        let isSetup = this._idh.setupSingle(name, value);
        let isChanged = this._idh.getChanges(name, value) !== null;
        if (isSetup || isChanged) {
            super._setOption(name, value);
        }
    }
};
DxLookupComponent.ɵfac = function DxLookupComponent_Factory(t) { return new (t || DxLookupComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DxTemplateHost), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.WatcherHelper), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.IterableDifferHelper), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NestedOptionHost), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.TransferState), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID)); };
DxLookupComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DxLookupComponent, selectors: [["dx-lookup"]], contentQueries: function DxLookupComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, DxiItemComponent, false);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.itemsChildren = _t);
    } }, hostBindings: function DxLookupComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("onBlur", function DxLookupComponent_onBlur_HostBindingHandler($event) { return ctx.touched($event); })("valueChange", function DxLookupComponent_valueChange_HostBindingHandler($event) { return ctx.change($event); });
    } }, inputs: { accessKey: "accessKey", activeStateEnabled: "activeStateEnabled", animation: "animation", applyButtonText: "applyButtonText", applyValueMode: "applyValueMode", cancelButtonText: "cancelButtonText", cleanSearchOnOpening: "cleanSearchOnOpening", clearButtonText: "clearButtonText", closeOnOutsideClick: "closeOnOutsideClick", dataSource: "dataSource", deferRendering: "deferRendering", disabled: "disabled", displayExpr: "displayExpr", displayValue: "displayValue", dropDownCentered: "dropDownCentered", dropDownOptions: "dropDownOptions", elementAttr: "elementAttr", fieldTemplate: "fieldTemplate", focusStateEnabled: "focusStateEnabled", fullScreen: "fullScreen", grouped: "grouped", groupTemplate: "groupTemplate", height: "height", hint: "hint", hoverStateEnabled: "hoverStateEnabled", inputAttr: "inputAttr", isValid: "isValid", items: "items", itemTemplate: "itemTemplate", minSearchLength: "minSearchLength", name: "name", nextButtonText: "nextButtonText", noDataText: "noDataText", opened: "opened", pageLoadingText: "pageLoadingText", pageLoadMode: "pageLoadMode", placeholder: "placeholder", popupHeight: "popupHeight", popupWidth: "popupWidth", position: "position", pulledDownText: "pulledDownText", pullingDownText: "pullingDownText", pullRefreshEnabled: "pullRefreshEnabled", refreshingText: "refreshingText", rtlEnabled: "rtlEnabled", searchEnabled: "searchEnabled", searchExpr: "searchExpr", searchMode: "searchMode", searchPlaceholder: "searchPlaceholder", searchTimeout: "searchTimeout", selectedItem: "selectedItem", shading: "shading", showCancelButton: "showCancelButton", showClearButton: "showClearButton", showDataBeforeSearch: "showDataBeforeSearch", showPopupTitle: "showPopupTitle", stylingMode: "stylingMode", tabIndex: "tabIndex", text: "text", title: "title", titleTemplate: "titleTemplate", useNativeScrolling: "useNativeScrolling", usePopover: "usePopover", validationError: "validationError", validationErrors: "validationErrors", validationMessageMode: "validationMessageMode", validationStatus: "validationStatus", value: "value", valueChangeEvent: "valueChangeEvent", valueExpr: "valueExpr", visible: "visible", width: "width", wrapItemText: "wrapItemText" }, outputs: { onClosed: "onClosed", onContentReady: "onContentReady", onDisposing: "onDisposing", onInitialized: "onInitialized", onItemClick: "onItemClick", onOpened: "onOpened", onOptionChanged: "onOptionChanged", onPageLoading: "onPageLoading", onPullRefresh: "onPullRefresh", onScroll: "onScroll", onSelectionChanged: "onSelectionChanged", onTitleRendered: "onTitleRendered", onValueChanged: "onValueChanged", accessKeyChange: "accessKeyChange", activeStateEnabledChange: "activeStateEnabledChange", animationChange: "animationChange", applyButtonTextChange: "applyButtonTextChange", applyValueModeChange: "applyValueModeChange", cancelButtonTextChange: "cancelButtonTextChange", cleanSearchOnOpeningChange: "cleanSearchOnOpeningChange", clearButtonTextChange: "clearButtonTextChange", closeOnOutsideClickChange: "closeOnOutsideClickChange", dataSourceChange: "dataSourceChange", deferRenderingChange: "deferRenderingChange", disabledChange: "disabledChange", displayExprChange: "displayExprChange", displayValueChange: "displayValueChange", dropDownCenteredChange: "dropDownCenteredChange", dropDownOptionsChange: "dropDownOptionsChange", elementAttrChange: "elementAttrChange", fieldTemplateChange: "fieldTemplateChange", focusStateEnabledChange: "focusStateEnabledChange", fullScreenChange: "fullScreenChange", groupedChange: "groupedChange", groupTemplateChange: "groupTemplateChange", heightChange: "heightChange", hintChange: "hintChange", hoverStateEnabledChange: "hoverStateEnabledChange", inputAttrChange: "inputAttrChange", isValidChange: "isValidChange", itemsChange: "itemsChange", itemTemplateChange: "itemTemplateChange", minSearchLengthChange: "minSearchLengthChange", nameChange: "nameChange", nextButtonTextChange: "nextButtonTextChange", noDataTextChange: "noDataTextChange", openedChange: "openedChange", pageLoadingTextChange: "pageLoadingTextChange", pageLoadModeChange: "pageLoadModeChange", placeholderChange: "placeholderChange", popupHeightChange: "popupHeightChange", popupWidthChange: "popupWidthChange", positionChange: "positionChange", pulledDownTextChange: "pulledDownTextChange", pullingDownTextChange: "pullingDownTextChange", pullRefreshEnabledChange: "pullRefreshEnabledChange", refreshingTextChange: "refreshingTextChange", rtlEnabledChange: "rtlEnabledChange", searchEnabledChange: "searchEnabledChange", searchExprChange: "searchExprChange", searchModeChange: "searchModeChange", searchPlaceholderChange: "searchPlaceholderChange", searchTimeoutChange: "searchTimeoutChange", selectedItemChange: "selectedItemChange", shadingChange: "shadingChange", showCancelButtonChange: "showCancelButtonChange", showClearButtonChange: "showClearButtonChange", showDataBeforeSearchChange: "showDataBeforeSearchChange", showPopupTitleChange: "showPopupTitleChange", stylingModeChange: "stylingModeChange", tabIndexChange: "tabIndexChange", textChange: "textChange", titleChange: "titleChange", titleTemplateChange: "titleTemplateChange", useNativeScrollingChange: "useNativeScrollingChange", usePopoverChange: "usePopoverChange", validationErrorChange: "validationErrorChange", validationErrorsChange: "validationErrorsChange", validationMessageModeChange: "validationMessageModeChange", validationStatusChange: "validationStatusChange", valueChange: "valueChange", valueChangeEventChange: "valueChangeEventChange", valueExprChange: "valueExprChange", visibleChange: "visibleChange", widthChange: "widthChange", wrapItemTextChange: "wrapItemTextChange", onBlur: "onBlur" }, features: [ɵngcc0.ɵɵProvidersFeature([
            DxTemplateHost,
            WatcherHelper,
            CUSTOM_VALUE_ACCESSOR_PROVIDER,
            NestedOptionHost,
            IterableDifferHelper
        ]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], decls: 0, vars: 0, template: function DxLookupComponent_Template(rf, ctx) { }, encapsulation: 2 });
DxLookupComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: NgZone },
    { type: DxTemplateHost },
    { type: WatcherHelper },
    { type: IterableDifferHelper },
    { type: NestedOptionHost },
    { type: TransferState },
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxLookupComponent.prototype, "accessKey", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxLookupComponent.prototype, "activeStateEnabled", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxLookupComponent.prototype, "animation", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxLookupComponent.prototype, "applyButtonText", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxLookupComponent.prototype, "applyValueMode", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxLookupComponent.prototype, "cancelButtonText", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxLookupComponent.prototype, "cleanSearchOnOpening", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxLookupComponent.prototype, "clearButtonText", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxLookupComponent.prototype, "closeOnOutsideClick", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxLookupComponent.prototype, "dataSource", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxLookupComponent.prototype, "deferRendering", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxLookupComponent.prototype, "disabled", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxLookupComponent.prototype, "displayExpr", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxLookupComponent.prototype, "displayValue", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxLookupComponent.prototype, "dropDownCentered", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxLookupComponent.prototype, "dropDownOptions", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxLookupComponent.prototype, "elementAttr", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxLookupComponent.prototype, "fieldTemplate", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxLookupComponent.prototype, "focusStateEnabled", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxLookupComponent.prototype, "fullScreen", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxLookupComponent.prototype, "grouped", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxLookupComponent.prototype, "groupTemplate", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxLookupComponent.prototype, "height", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxLookupComponent.prototype, "hint", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxLookupComponent.prototype, "hoverStateEnabled", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxLookupComponent.prototype, "inputAttr", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxLookupComponent.prototype, "isValid", null);
__decorate([
    Input(),
    __metadata("design:type", Array),
    __metadata("design:paramtypes", [Array])
], DxLookupComponent.prototype, "items", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxLookupComponent.prototype, "itemTemplate", null);
__decorate([
    Input(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], DxLookupComponent.prototype, "minSearchLength", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxLookupComponent.prototype, "name", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxLookupComponent.prototype, "nextButtonText", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxLookupComponent.prototype, "noDataText", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxLookupComponent.prototype, "opened", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxLookupComponent.prototype, "pageLoadingText", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxLookupComponent.prototype, "pageLoadMode", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxLookupComponent.prototype, "placeholder", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxLookupComponent.prototype, "popupHeight", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxLookupComponent.prototype, "popupWidth", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxLookupComponent.prototype, "position", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxLookupComponent.prototype, "pulledDownText", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxLookupComponent.prototype, "pullingDownText", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxLookupComponent.prototype, "pullRefreshEnabled", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxLookupComponent.prototype, "refreshingText", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxLookupComponent.prototype, "rtlEnabled", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxLookupComponent.prototype, "searchEnabled", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxLookupComponent.prototype, "searchExpr", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxLookupComponent.prototype, "searchMode", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxLookupComponent.prototype, "searchPlaceholder", null);
__decorate([
    Input(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], DxLookupComponent.prototype, "searchTimeout", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxLookupComponent.prototype, "selectedItem", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxLookupComponent.prototype, "shading", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxLookupComponent.prototype, "showCancelButton", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxLookupComponent.prototype, "showClearButton", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxLookupComponent.prototype, "showDataBeforeSearch", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxLookupComponent.prototype, "showPopupTitle", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxLookupComponent.prototype, "stylingMode", null);
__decorate([
    Input(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], DxLookupComponent.prototype, "tabIndex", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxLookupComponent.prototype, "text", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxLookupComponent.prototype, "title", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxLookupComponent.prototype, "titleTemplate", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxLookupComponent.prototype, "useNativeScrolling", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxLookupComponent.prototype, "usePopover", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxLookupComponent.prototype, "validationError", null);
__decorate([
    Input(),
    __metadata("design:type", Array),
    __metadata("design:paramtypes", [Array])
], DxLookupComponent.prototype, "validationErrors", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxLookupComponent.prototype, "validationMessageMode", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxLookupComponent.prototype, "validationStatus", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxLookupComponent.prototype, "value", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxLookupComponent.prototype, "valueChangeEvent", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxLookupComponent.prototype, "valueExpr", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxLookupComponent.prototype, "visible", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxLookupComponent.prototype, "width", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxLookupComponent.prototype, "wrapItemText", null);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "onClosed", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "onContentReady", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "onDisposing", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "onInitialized", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "onItemClick", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "onOpened", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "onOptionChanged", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "onPageLoading", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "onPullRefresh", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "onScroll", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "onSelectionChanged", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "onTitleRendered", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "onValueChanged", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "accessKeyChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "activeStateEnabledChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "animationChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "applyButtonTextChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "applyValueModeChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "cancelButtonTextChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "cleanSearchOnOpeningChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "clearButtonTextChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "closeOnOutsideClickChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "dataSourceChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "deferRenderingChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "disabledChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "displayExprChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "displayValueChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "dropDownCenteredChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "dropDownOptionsChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "elementAttrChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "fieldTemplateChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "focusStateEnabledChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "fullScreenChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "groupedChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "groupTemplateChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "heightChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "hintChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "hoverStateEnabledChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "inputAttrChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "isValidChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "itemsChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "itemTemplateChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "minSearchLengthChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "nameChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "nextButtonTextChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "noDataTextChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "openedChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "pageLoadingTextChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "pageLoadModeChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "placeholderChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "popupHeightChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "popupWidthChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "positionChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "pulledDownTextChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "pullingDownTextChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "pullRefreshEnabledChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "refreshingTextChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "rtlEnabledChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "searchEnabledChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "searchExprChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "searchModeChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "searchPlaceholderChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "searchTimeoutChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "selectedItemChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "shadingChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "showCancelButtonChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "showClearButtonChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "showDataBeforeSearchChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "showPopupTitleChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "stylingModeChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "tabIndexChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "textChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "titleChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "titleTemplateChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "useNativeScrollingChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "usePopoverChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "validationErrorChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "validationErrorsChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "validationMessageModeChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "validationStatusChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "valueChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "valueChangeEventChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "valueExprChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "visibleChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "widthChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "wrapItemTextChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxLookupComponent.prototype, "onBlur", void 0);
__decorate([
    HostListener('valueChange', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], DxLookupComponent.prototype, "change", null);
__decorate([
    HostListener('onBlur', ['$event']),
    __metadata("design:type", Object)
], DxLookupComponent.prototype, "touched", void 0);
__decorate([
    ContentChildren(DxiItemComponent),
    __metadata("design:type", QueryList),
    __metadata("design:paramtypes", [Object])
], DxLookupComponent.prototype, "itemsChildren", null);
DxLookupComponent = __decorate([ __param(7, Inject(PLATFORM_ID)),
    __metadata("design:paramtypes", [ElementRef, NgZone, DxTemplateHost,
        WatcherHelper,
        IterableDifferHelper,
        NestedOptionHost,
        TransferState, Object])
], DxLookupComponent);
let DxLookupModule = class DxLookupModule {
};
DxLookupModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DxLookupModule });
DxLookupModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DxLookupModule_Factory(t) { return new (t || DxLookupModule)(); }, imports: [[
            DxoAnimationModule,
            DxoHideModule,
            DxoShowModule,
            DxoDropDownOptionsModule,
            DxoHideEventModule,
            DxoPositionModule,
            DxoAtModule,
            DxoBoundaryOffsetModule,
            DxoCollisionModule,
            DxoMyModule,
            DxoOffsetModule,
            DxoShowEventModule,
            DxiToolbarItemModule,
            DxiItemModule,
            DxIntegrationModule,
            DxTemplateModule,
            BrowserTransferStateModule
        ], DxoAnimationModule,
        DxoHideModule,
        DxoShowModule,
        DxoDropDownOptionsModule,
        DxoHideEventModule,
        DxoPositionModule,
        DxoAtModule,
        DxoBoundaryOffsetModule,
        DxoCollisionModule,
        DxoMyModule,
        DxoOffsetModule,
        DxoShowEventModule,
        DxiToolbarItemModule,
        DxiItemModule,
        DxTemplateModule] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DxLookupComponent, [{
        type: Component,
        args: [{
                selector: 'dx-lookup',
                template: '',
                providers: [
                    DxTemplateHost,
                    WatcherHelper,
                    CUSTOM_VALUE_ACCESSOR_PROVIDER,
                    NestedOptionHost,
                    IterableDifferHelper
                ]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc1.DxTemplateHost }, { type: ɵngcc1.WatcherHelper }, { type: ɵngcc1.IterableDifferHelper }, { type: ɵngcc1.NestedOptionHost }, { type: ɵngcc2.TransferState }, { type: undefined, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }]; }, { touched: [{
            type: HostListener,
            args: ['onBlur', ['$event']]
        }], accessKey: [{
            type: Input
        }], activeStateEnabled: [{
            type: Input
        }], animation: [{
            type: Input
        }], applyButtonText: [{
            type: Input
        }], applyValueMode: [{
            type: Input
        }], cancelButtonText: [{
            type: Input
        }], cleanSearchOnOpening: [{
            type: Input
        }], clearButtonText: [{
            type: Input
        }], closeOnOutsideClick: [{
            type: Input
        }], dataSource: [{
            type: Input
        }], deferRendering: [{
            type: Input
        }], disabled: [{
            type: Input
        }], displayExpr: [{
            type: Input
        }], displayValue: [{
            type: Input
        }], dropDownCentered: [{
            type: Input
        }], dropDownOptions: [{
            type: Input
        }], elementAttr: [{
            type: Input
        }], fieldTemplate: [{
            type: Input
        }], focusStateEnabled: [{
            type: Input
        }], fullScreen: [{
            type: Input
        }], grouped: [{
            type: Input
        }], groupTemplate: [{
            type: Input
        }], height: [{
            type: Input
        }], hint: [{
            type: Input
        }], hoverStateEnabled: [{
            type: Input
        }], inputAttr: [{
            type: Input
        }], isValid: [{
            type: Input
        }], items: [{
            type: Input
        }], itemTemplate: [{
            type: Input
        }], minSearchLength: [{
            type: Input
        }], name: [{
            type: Input
        }], nextButtonText: [{
            type: Input
        }], noDataText: [{
            type: Input
        }], opened: [{
            type: Input
        }], pageLoadingText: [{
            type: Input
        }], pageLoadMode: [{
            type: Input
        }], placeholder: [{
            type: Input
        }], popupHeight: [{
            type: Input
        }], popupWidth: [{
            type: Input
        }], position: [{
            type: Input
        }], pulledDownText: [{
            type: Input
        }], pullingDownText: [{
            type: Input
        }], pullRefreshEnabled: [{
            type: Input
        }], refreshingText: [{
            type: Input
        }], rtlEnabled: [{
            type: Input
        }], searchEnabled: [{
            type: Input
        }], searchExpr: [{
            type: Input
        }], searchMode: [{
            type: Input
        }], searchPlaceholder: [{
            type: Input
        }], searchTimeout: [{
            type: Input
        }], selectedItem: [{
            type: Input
        }], shading: [{
            type: Input
        }], showCancelButton: [{
            type: Input
        }], showClearButton: [{
            type: Input
        }], showDataBeforeSearch: [{
            type: Input
        }], showPopupTitle: [{
            type: Input
        }], stylingMode: [{
            type: Input
        }], tabIndex: [{
            type: Input
        }], text: [{
            type: Input
        }], title: [{
            type: Input
        }], titleTemplate: [{
            type: Input
        }], useNativeScrolling: [{
            type: Input
        }], usePopover: [{
            type: Input
        }], validationError: [{
            type: Input
        }], validationErrors: [{
            type: Input
        }], validationMessageMode: [{
            type: Input
        }], validationStatus: [{
            type: Input
        }], value: [{
            type: Input
        }], valueChangeEvent: [{
            type: Input
        }], valueExpr: [{
            type: Input
        }], visible: [{
            type: Input
        }], width: [{
            type: Input
        }], wrapItemText: [{
            type: Input
        }], change: [{
            type: HostListener,
            args: ['valueChange', ['$event']]
        }], itemsChildren: [{
            type: ContentChildren,
            args: [DxiItemComponent]
        }], onClosed: [{
            type: Output
        }], onContentReady: [{
            type: Output
        }], onDisposing: [{
            type: Output
        }], onInitialized: [{
            type: Output
        }], onItemClick: [{
            type: Output
        }], onOpened: [{
            type: Output
        }], onOptionChanged: [{
            type: Output
        }], onPageLoading: [{
            type: Output
        }], onPullRefresh: [{
            type: Output
        }], onScroll: [{
            type: Output
        }], onSelectionChanged: [{
            type: Output
        }], onTitleRendered: [{
            type: Output
        }], onValueChanged: [{
            type: Output
        }], accessKeyChange: [{
            type: Output
        }], activeStateEnabledChange: [{
            type: Output
        }], animationChange: [{
            type: Output
        }], applyButtonTextChange: [{
            type: Output
        }], applyValueModeChange: [{
            type: Output
        }], cancelButtonTextChange: [{
            type: Output
        }], cleanSearchOnOpeningChange: [{
            type: Output
        }], clearButtonTextChange: [{
            type: Output
        }], closeOnOutsideClickChange: [{
            type: Output
        }], dataSourceChange: [{
            type: Output
        }], deferRenderingChange: [{
            type: Output
        }], disabledChange: [{
            type: Output
        }], displayExprChange: [{
            type: Output
        }], displayValueChange: [{
            type: Output
        }], dropDownCenteredChange: [{
            type: Output
        }], dropDownOptionsChange: [{
            type: Output
        }], elementAttrChange: [{
            type: Output
        }], fieldTemplateChange: [{
            type: Output
        }], focusStateEnabledChange: [{
            type: Output
        }], fullScreenChange: [{
            type: Output
        }], groupedChange: [{
            type: Output
        }], groupTemplateChange: [{
            type: Output
        }], heightChange: [{
            type: Output
        }], hintChange: [{
            type: Output
        }], hoverStateEnabledChange: [{
            type: Output
        }], inputAttrChange: [{
            type: Output
        }], isValidChange: [{
            type: Output
        }], itemsChange: [{
            type: Output
        }], itemTemplateChange: [{
            type: Output
        }], minSearchLengthChange: [{
            type: Output
        }], nameChange: [{
            type: Output
        }], nextButtonTextChange: [{
            type: Output
        }], noDataTextChange: [{
            type: Output
        }], openedChange: [{
            type: Output
        }], pageLoadingTextChange: [{
            type: Output
        }], pageLoadModeChange: [{
            type: Output
        }], placeholderChange: [{
            type: Output
        }], popupHeightChange: [{
            type: Output
        }], popupWidthChange: [{
            type: Output
        }], positionChange: [{
            type: Output
        }], pulledDownTextChange: [{
            type: Output
        }], pullingDownTextChange: [{
            type: Output
        }], pullRefreshEnabledChange: [{
            type: Output
        }], refreshingTextChange: [{
            type: Output
        }], rtlEnabledChange: [{
            type: Output
        }], searchEnabledChange: [{
            type: Output
        }], searchExprChange: [{
            type: Output
        }], searchModeChange: [{
            type: Output
        }], searchPlaceholderChange: [{
            type: Output
        }], searchTimeoutChange: [{
            type: Output
        }], selectedItemChange: [{
            type: Output
        }], shadingChange: [{
            type: Output
        }], showCancelButtonChange: [{
            type: Output
        }], showClearButtonChange: [{
            type: Output
        }], showDataBeforeSearchChange: [{
            type: Output
        }], showPopupTitleChange: [{
            type: Output
        }], stylingModeChange: [{
            type: Output
        }], tabIndexChange: [{
            type: Output
        }], textChange: [{
            type: Output
        }], titleChange: [{
            type: Output
        }], titleTemplateChange: [{
            type: Output
        }], useNativeScrollingChange: [{
            type: Output
        }], usePopoverChange: [{
            type: Output
        }], validationErrorChange: [{
            type: Output
        }], validationErrorsChange: [{
            type: Output
        }], validationMessageModeChange: [{
            type: Output
        }], validationStatusChange: [{
            type: Output
        }], valueChange: [{
            type: Output
        }], valueChangeEventChange: [{
            type: Output
        }], valueExprChange: [{
            type: Output
        }], visibleChange: [{
            type: Output
        }], widthChange: [{
            type: Output
        }], wrapItemTextChange: [{
            type: Output
        }], onBlur: [{
            type: Output
        }] }); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DxLookupModule, { declarations: function () { return [DxLookupComponent]; }, imports: function () { return [DxoAnimationModule,
        DxoHideModule,
        DxoShowModule,
        DxoDropDownOptionsModule,
        DxoHideEventModule,
        DxoPositionModule,
        DxoAtModule,
        DxoBoundaryOffsetModule,
        DxoCollisionModule,
        DxoMyModule,
        DxoOffsetModule,
        DxoShowEventModule,
        DxiToolbarItemModule,
        DxiItemModule,
        DxIntegrationModule,
        DxTemplateModule,
        BrowserTransferStateModule]; }, exports: function () { return [DxLookupComponent, DxoAnimationModule,
        DxoHideModule,
        DxoShowModule,
        DxoDropDownOptionsModule,
        DxoHideEventModule,
        DxoPositionModule,
        DxoAtModule,
        DxoBoundaryOffsetModule,
        DxoCollisionModule,
        DxoMyModule,
        DxoOffsetModule,
        DxoShowEventModule,
        DxiToolbarItemModule,
        DxiItemModule,
        DxTemplateModule]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DxLookupModule, [{
        type: NgModule,
        args: [{
                imports: [
                    DxoAnimationModule,
                    DxoHideModule,
                    DxoShowModule,
                    DxoDropDownOptionsModule,
                    DxoHideEventModule,
                    DxoPositionModule,
                    DxoAtModule,
                    DxoBoundaryOffsetModule,
                    DxoCollisionModule,
                    DxoMyModule,
                    DxoOffsetModule,
                    DxoShowEventModule,
                    DxiToolbarItemModule,
                    DxiItemModule,
                    DxIntegrationModule,
                    DxTemplateModule,
                    BrowserTransferStateModule
                ],
                declarations: [
                    DxLookupComponent
                ],
                exports: [
                    DxLookupComponent,
                    DxoAnimationModule,
                    DxoHideModule,
                    DxoShowModule,
                    DxoDropDownOptionsModule,
                    DxoHideEventModule,
                    DxoPositionModule,
                    DxoAtModule,
                    DxoBoundaryOffsetModule,
                    DxoCollisionModule,
                    DxoMyModule,
                    DxoOffsetModule,
                    DxoShowEventModule,
                    DxiToolbarItemModule,
                    DxiItemModule,
                    DxTemplateModule
                ]
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { DxLookupComponent, DxLookupModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,